scalar Date

input AddressInput {
  address1: String!
  address2: String
  city: String!
  state: String!
  pinCode: Int!
}

type Address {
  address1: String!
  address2: String
  city: String!
  state: String!
  pinCode: Int!
}

enum StatusInput {
  scheduled
  started
  closed
  onHold
}

enum StatusOutput {
  scheduled
  inProgress
  delayed
  completed
  closed
  onHold
}

enum ProjectType {
  active
  inactive
}

type Project {
  """
  Id of the project
  """
  id: ID!
  """
  ProjectId of the project
  """
  projectID: String!
  """
  Name of the project
  """
  name: String!
  """
  Description of the project
  """
  desc: String
  """
  Date when the project was created
  """
  createdAt: Date!
  """
  User who created the project
  """
  createdBy: String!
  """
  Date when the project was last updated
  """
  updatedAt: Date!
  """
  User who last updated the project
  """
  updatedBy: String!
  """
  Date when the project is expected to start. Can't be updated after project has started.
  """
  scheduledStartDate: Date!
  """
  Date when the project actually started. Set automatically when project status is set to started.
  """
  actualStartDate: Date
  """
  Date when the project is expected to end. Set automatically when project status is set to started.
  """
  scheduledEndDate: Date
  """
  Date when the project is expected to end. Calculated everytime.
  """
  expectedEndDate: Date!
  """
  Date when the project actually ended. Set automatically when project status is set to closed.
  """
  actualEndDate: Date
  """
  Status of the project (scheduled, inProgress, delayed, completed, closed, onHold)
  """
  status: StatusOutput!
  """
  Address of the project
  """
  address: Address!
  """
  Project owner of the project
  """
  projectOwner: String!
}

extend type Query {
  """
  Get one or more projects. All arguments are optional, pass only if you need to filter on these.

  If multiple filters are passed, then AND operation will be done on them.
  """
  getProjects(
    """
    Id of the project
    """
    _id: ID
    """
    ProjectId of the project
    """
    projectID: String
    """
    Search for a project by projectID/name/location
    """
    search: String
    """
    From Date of filter
    """
    fromDate: Date
    """
    To Date of filter
    """
    toDate: Date
    """
    Type of project (active/inactive). Active: inProgress/delayed/completed. Inactive: scheduled/closed/onHold/delayed
    """
    type: ProjectType
    """
    Sort by field. E.g. sort by name(ascending): name, sort by name(descending): -name
    """
    sort: String
    """
    Page number, starts from 0
    """
    page: Int
  ): [Project]

  """
  Get one project by projectID
  """
  getProject(
    """
    ProjectId of the project
    """
    projectID: String!
  ): Project
}

extend type Mutation {
  """
  Create a new project
  """
  createProject(
    """
    Name of the project
    """
    name: String!
    """
    Description of the project
    """
    desc: String
    """
    Date when the project is expected to start. Can't be updated after project has started.
    """
    scheduledStartDate: Date!
    """
    Address of the project
    """
    address: AddressInput!
    """
    Project owner of the project
    """
    projectOwner: String!
  ): Project

  """
  Update a project
  """
  updateProject(
    """
    ProjectId of the project, used to find the project to be updated.
    """
    projectID: String!
    """
    Name of the project
    """
    name: String
    """
    Description of the project
    """
    desc: String
    """
    Date when the project is expected to start. Can't be updated after project has started.
    """
    scheduledStartDate: Date
    """
    Status of the project (scheduled, started, closed, onHold)
    """
    status: StatusInput
    """
    Address of the project
    """
    address: AddressInput
    """
    Project owner of the project
    """
    projectOwner: String
  ): Modified

  """
  Soft delete a project
  """
  deleteProject(
    """
    ProjectId of the project, used to find the project to be deleted.
    """
    projectID: String!
  ): Modified
}
